// node main.js test.mocha

// 基础语句:
var assertPrint = function(expect, actual) {
    print("expect: " + expect);
    print("actual: " + actual);
};
// 1 VarStatement
print("===赋值语句===");
var a = 1;
var b = 2;
var c = a + b * b - a;
var d = c++;
var e = ++c;
assertPrint([1, 2, 6, 4, 6], [a, b, c, d, e]);

// 2 ReturnStatement
print("===返回语句===");
var add = function(a, b) {
    return a + b;
};
assertPrint(3, add(1, 2));


// 3 BlockStatement
print("===块语句===");
var a = 1;
{
    var a = 100;
    assertPrint(100, a);
}
assertPrint(1, a);


// 4 ExpressionStatement 1+ 2*3/4 - 4 = -1.5
assertPrint(-1.5, a + b * 3 / 4 - d);

// 5 IfStatement
var a = 1;
var e = 2;
var b = 3;
print("expect: a <= e, a <= b");
if (a > e) {
    print("a > e");
} else {
    print("a <= e");
    if (a > b) {
        print("a > b");
    } else {
        print("a <= b");
    }
}

// 6 ForStatement ContinueStatement BreakStatement
print("expect: 0,1,2,3,4,6,7");
for (var i = 0; i < 10; i++) {
    // 不打印5
    if (i == 5) {
        continue;
    }
    // 不打印8 9
    if (i == 8) {
        break;
    }
    print(i);
}


// 7 ClassStatement
class Person {
    constructor(name, age) {
        super();
        this.name = name;
        if (age) {
            this.age = age;
        } else {
            this.age = 18;
        }
    }
    sayName(){
        print(this.name + "," + this.age);
    }
}
var tom = new Person("Tom", 30);
var lily = new Person("Lily");

print("expect: Tom,30");
tom.sayName();
print("expect: Lily,18");
lily.sayName();

// 8 ThrowStatement TryCatchStatement

print("expect: error:, a or b is not a number");
var add = function(a, b) {
    if (a.type == "number" && b.type == "number") {
        return a + b;
    } else {
        throw error("a or b is not a number");
    }
};
function() {
    try {
        print("1+1=", add(1, 1));
        print("1+a=", add(1, "a"));
        print("2+2=", add(2, 2));
    } catch(e) {
        print("error:", e.message);
    }
}();

// 面向对象的继承与多态
class Animal {
    constructor(name){
        super();
        this.name = name;
    }
    sayName() {
        print("My name is " + this.name);
    }
}
class Dog extends Animal {
    constructor(name) {
        super(name);
    }
    sayName() {
        print("My name is " + this.name + ", I'm a dog");
    }
}

var tom = new Animal("Tom");
var lily = new Dog("Lily");

print("expect: My name is Tom");
tom.sayName();
print("expect: My name is Lily, I'm a dog");
lily.sayName();

// 类似js的处理逻辑，B.c会调用A.b，而A.b会调用this.a()，这里的this指向B对象，所以最后打印B.a
class A {
  age = 1;
  a() {
    print("A.a");
  }
  b() {
    this.a();
  }
}

class B extends A{
  a() {
    print("B.a");
  }
  b() {
    print("B.b");
  }
  c() {
    super.b();
  }
}
print("expect: B.a");
print(B);
new B().c();
// 字符串和数组基础能力
var str = "aBc";
print(str.toLowerCase());
print(str.toUpperCase());
print(str.substring(1, 2));
print(str.charAt(1), str[1]);
print(str.indexOf("B"));
print(str.startsWith("a"));
print(str.endsWith("a"));
print(str.replaceAll("B", "0.0"));
print(" 123 ".trimLeft().length());
print(" 123 ".trimRight().length());
print(" 123 ".trim().length());
print(" 123 ".trim().toNumber() % 100 == 23);

print("array");
var arr = "a,b,c".split(",");
var arr2 = ["d", "e", "f"];
print(arr.length());
print(arr[1]);
for (var i = 0; i < arr.length(); i++) {
    arr2.push(arr[i]);
}
print(arr2);
arr2.push("end");
arr2.unshift("start");
print(arr2);

print(arr2.pop(), arr2.pop());
print(arr2.shift(), arr2.shift());
print(arr2);
print(arr2.join(";"));

// 灵活对象
var obj = {name: "Tom"};
obj.age = 100;
obj.parent = {name: "Frank"};
obj.parent.age = 200;
print(obj);
obj.parent.age++;
print(obj.parent);


// util中引入的基础库
// Math
print(Math.abs(-1) + Math.ceil(1.1) + Math.floor(1.1));
print(Math.random());

// File
File.writeFile("./test.txt", "Hello World\n");
File.appendFile("./test.txt", "FooBar\n");
print(File.readFile("./test.txt"));


// Http
if (Http && Http.fetch) {
    var content = Http.fetch("https://test.xiaogenban1993.com/uuid", {method: "GET"});
    print(content.status, content.body);
}

// Json
var obj = {a: 1, b:"b", c: false, d: null, e: [1, {k: 3}]};

print(obj);
var json = null;
if (Json) {
    print(json =Json.stringify(obj));
    print(Json.parse(json));
}

var loop = function(n) {
    for (var i=0; i<n; i++) {
        print(i);
        if (i == 3) {
            return 3;
        }
        print(i);
    }
    print(100);
    return 100;
};
print("loop(5)=", loop(5));
print("loop(2)=", loop(2));

// 类中方法与函数的区别：函数是字段
class A {
    a = function(){print("A.field.a");}
    a(){
        print("A.method.a");
    }
}
new A().a(); // 字段在自身，方法在原型，所以字段优先级高打印field.a

class B extends A{
    a() {print("B.a");}
}

new B().a(); // 也是打印A.field.a，因为B构造方法会调用A构造方法，A构造方法会对a字段赋值，该行为与js保持一致
